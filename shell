#!/usr/bin/env python

import sys
from os import path
import json
import argparse
from cmn_name_helper import get_name_abbr_dict
from cmn_pkg_helper import get_cmn_fun_list, get_cmn_pkg_dict, validate_cmn_pkg_path, get_pkgs_by_fun, get_cmn_fun_pkg_mapping
from index_metadata import IndexMetadata
from cmn_color_helper import ColorStr


def get_fun_list(pkg_root_path):
    return get_cmn_fun_list(pkg_root_path)

def get_fun_pkg_tab_list(pkg_root_path):
    return get_cmn_fun_pkg_mapping(pkg_root_path)

def get_fun_list_json():
    return json.dumps(get_fun_list(pkg_root_path))

def get_pkg_by_fun(pkg_root_path, fun_name):
    return get_pkgs_by_fun(pkg_root_path, fun_name)

def search_by_tokens(tokens, pkg_path, is_union = False):
    index_metadata = IndexMetadata()
    index_metadata.set_name_abbr(get_name_abbr_dict())
    index_metadata.set_pkg_codes(get_cmn_pkg_dict(pkg_path))
    return index_metadata.get_fun_meta_by_tokens(tokens, is_union)


def _gen_optparser():
    op = argparse.ArgumentParser(description='Search common functions more easily.')
    op.add_argument('-l', '--list-fun', help='List All Common Functions',
            action='store_true', dest='list_fun')
    op.add_argument('-m', '--pkg-fun-mapping', help='Get All Common Fn-Pkg Mapping',
            action='store_true', dest='fun_pkg_mapping')
    op.add_argument('-s', '--search-fun', help='Search Common Functions by Tokens',
            dest='search_tokens', nargs='+')
    op.add_argument('-k', '--get-pkgs', help='Get Packages by Function',
            dest='mapping_fun_name')
    op.add_argument('-p', '--path', help='Specify /scarecrow-rules/packages Path',
            dest='pkg_path', default='~/code/scarecrow-rules/packages')
    return op

def _upsert_pkg_fun_mapping(d, k, v):
    if k not in d:
        d[k] = []
    d[k].append(v)
    return d

opt_parser = _gen_optparser()
args = opt_parser.parse_args()
pkg_path = validate_cmn_pkg_path(args.pkg_path)
list_fun = args.list_fun
fun_pkg_mapping = args.fun_pkg_mapping
mapping_fun_name = args.mapping_fun_name
search_tokens = args.search_tokens
if not pkg_path:
    sys.exit('The package path doesn\'t valid: ' + args.pkg_path)
if not list_fun and not fun_pkg_mapping and not search_tokens and not mapping_fun_name:
    print >>sys.stderr, 'Please at least choose -l or -s!\nSee also Help.\n'
    #print('Please at least choose -l or -s!', file=sys.stderr)
    opt_parser.print_help()
    sys.exit(1)


if list_fun:
    print ('\n').join(get_fun_list(pkg_path))

if fun_pkg_mapping:
    print ('\n').join(get_fun_pkg_tab_list(pkg_path))

if mapping_fun_name:
    print ('\n').join(get_pkg_by_fun(pkg_path, mapping_fun_name))

if search_tokens and len(search_tokens) > 0:
    result_meta = search_by_tokens(search_tokens, pkg_path)
    pkg_fun_mapping = {}
    for meta in result_meta:
        _upsert_pkg_fun_mapping(pkg_fun_mapping, meta['package'], meta)
    for pkg, metas in pkg_fun_mapping.iteritems():
        print '===={}===='.format(ColorStr.color_pkg_name(pkg))
        for meta in metas:
            print 'Name: {}'.format(ColorStr.color_fun_name(meta['name']))
            print 'Tests:\n{}'.format(meta['tests'])
            print '--------'
        print '========\n'
    print '\n=============='
    print '{} function(s) found in total'.format(len(result_meta))
    print '=============='

